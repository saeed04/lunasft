openapi: 3.0.3
servers:
  - url: '//petstore.swagger.io/v2'
info:
  description: >-
    This is a sample server Petstore server.  You can find out more about
    Swagger at [http://swagger.io](http://swagger.io) or on [irc.freenode.net,
    #swagger](http://swagger.io/irc/).  For this sample, you can use the api key
    `special-key` to test the authorization filters.
  version: 1.0.0
  title: Swagger Petstore
  termsOfService: 'http://swagger.io/terms/'
  contact:
    email: apiteam@swagger.io
  license:
    name: Apache 2.0
    url: 'http://www.apache.org/licenses/LICENSE-2.0.html'
tags:
  - name: pet
    description: Everything about your Pets
    externalDocs:
      description: Find out more
      url: 'http://swagger.io'
  - name: store
    description: Access to Petstore orders
  - name: user
    description: Operations about user
    externalDocs:
      description: Find out more about our store
      url: 'http://swagger.io'
paths:
  /create_member:
    post:
      summary: Create Member
      description: |
        member is unique value. we recommended to add prefixes when register ex blsmb0001
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                username:
                  type: string
                  example: 'member001'
                  minLength: 6
                  maxLength: 18
                password:
                  type: string
                  example: 'a@1234'
                  description: 'Password should be at 6 - 24 characters long and at least one special character.'
                  minLength: 6
                  maxLength: 24
                phone_number_contact:
                  type: string
                  example: '098765431'
                  minLength: 9
                memo:
                  type: string
                  example : 'memo'
                sign:
                  type: string
                  description: |
                    `HMACMD5(username + password + x-vendor-id)`
                  example: '4d9bf50cdb08e6796a772ca36f0d0dff'
              required:
                - username
                - password
                - sign
      responses:
        '200':
          description: successful
        '500':
          description: Error

 
  /change_password:
    post:
      summary:  Change Password
      description: Change member password by agent.
      requestBody:
        content:
          application/json:
            schema:
              properties:
                username:
                  type: string
                  example: member001
                new_password:
                  type: string
                  example: 1234@b
                sign:
                  type: string
                  description: |
                    `HMACMD5(username + new_password + x-vendor-id)`
                  example: '4d9bf50cdb08e6796a772ca36f0d0dff'
              required:
                - username
                - password
                - sign
      responses:
        '200':
          description: successful 
        '500':
          description: Error
  /balance:
    post:
      summary: 'Member Balance'
      description: 'Call Member Balance'
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                username:
                  type: string
                  example: 'member001'
                sign:
                  type: string
                  description: |
                    `HMACMD5(username + x-vendor-id)`
                  example: 'a3b2f435648d8a38eabb7d968332701b'
      responses:
        '200':
          description: successful 
        '500':
          description: Error       
          
  /increase_credit:
    post:
      summary: 'Increase Credit'
      description: increase your member credit.
      requestBody:
        content:
          application/json:
            schema:
              properties:
                username:
                  type: string
                  example: 'member001'
                amount:
                  type: number
                  example: 50.0
                sign:
                  type: string
                  description: |
                    `HMACMD5(username + amount + x-vendor-id)`
                  example: '4d9bf50cdb08e6796a772ca36f0d0dff'
      responses:
        '200':
          description: successful
        '500':
          description: Error

  /decrease_credit:
    post:
      summary: 'Decrease Credit'
      description: decrease your member credit.
      requestBody:
        content:
          application/json:
            schema:
              properties:
                username:
                  type: string
                  example: 'member001'
                amount:
                  type: number
                  example: 50.0
                sign:
                  type: string
                  description: |
                    `HMACMD5(username + amount + x-vendor-id)`
                  example: '4d9bf50cdb08e6796a772ca36f0d0dff'
      responses:
        '200':
          description: successful
        '500':
          description: Error
          
  /game_list:
    get:
      summary: 'Game List (Slot Game Only)'
      description: |
        Get the game URL with provider_code, the game is redirected to the lobby via this link. See **Provider Code** Section.
      requestBody:
        content:
          application/json:
            schema:
              properties:
                provider_code:
                  type: string
                  example: "JK"
                sign:
                  type: string
                  description: |
                    `HMACMD5(provider_code + x-vendor-id)`
                  example: 'a3b2f435648d8a38eabb7d968332701b'
      responses:
        '200':
          description: successful
        '500':
          description: Error
      
  /game_list_fishing:
    get:
      summary: Game List (Fish Game Only)
      description:  Get the fishing game URL, the game is redirected to the lobby via this link. See **Provider Code** Section.
      requestBody:
        content:
          application/json:
            schema:
              properties:
                sign:
                  type: string
                  description: |
                    `HMACMD5(provider_code + x-vendor-id)`
      responses:
        '200':
          $ref: "#/components/responses/PetResponse"
        '500':
          description: Error
          
  /launch_game:
    post:
      summary: Launch Game
      description:  Get the game URL with game_code, the game is redirected to the lobby via this link. See **Provider Code** Section.
      requestBody:
        content:
          application/json:
            schema:
              properties:
                game_code:
                  type: string
                  example: "1"
                provider_code:
                  type: string
                  example: "JK"
                language:
                  type: string
                  description: Support TH, EN, CN
                  example: "TH"
                platform:
                  type: string
                  description: 1 = Desktop, 2 = Mobile
                  example: 1
                username:
                  type: string
                  example: 'member001'
                sign:
                  type: string
                  description: |
                    `HMACMD5(username + provider_code + x-vendor-id)`
      responses:
        '200':
          description: successful 
        '500':
          description: Error

  '/login':
    post:
      summary: Login to Lobby
      description:  Login with your member name and go to lobby for play game.
      requestBody:
        content:
          application/json:
            schema:
              properties:
                username:
                  type: string
                  description: username must use prefix
                  example: "blsmb0001_b1"
                domain:
                  type: string
                  example: 'your-domain.demo'
                  description: do not include proto [http, https] in value.
                redirect_url:
                  type: string
                  description: redirect url for return to your lobby when user click logout
                  example: "https://your-domain.demo"
                sign:
                  type: string
                  description: |
                    `HMACMD5(username + x-vendor-id)`
      responses:
        '200':
          description: successful 
        '500':
          description: Error
   
  /update_game_status:
    post:
      summary: Game Status (Open/Close)
      description: Update the game status by game_code. after update game status your member can't play game.
      responses:
        default:
          description: successful operation
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/User'
        description: Created user object
        required: true
  /user/createWithArray:
    post:
      tags:
        - user
      summary: Creates list of users with given input array
      description: ''
      operationId: createUsersWithArrayInput
      responses:
        default:
          description: successful operation
      requestBody:
        $ref: '#/components/requestBodies/UserArray'
  /user/createWithList:
    post:
      tags:
        - user
      summary: Creates list of users with given input array
      description: ''
      operationId: createUsersWithListInput
      responses:
        default:
          description: successful operation
      requestBody:
        $ref: '#/components/requestBodies/UserArray'
  /user/login:
    get:
      tags:
        - user
      summary: Logs user into the system
      description: ''
      operationId: loginUser
      parameters:
        - name: username
          in: query
          description: The user name for login
          required: true
          schema:
            type: string
        - name: password
          in: query
          description: The password for login in clear text
          required: true
          schema:
            type: string
      responses:
        '200':
          description: successful operation
          headers:
            X-Rate-Limit:
              description: calls per hour allowed by the user
              schema:
                type: integer
                format: int32
            X-Expires-After:
              description: date in UTC when token expires
              schema:
                type: string
                format: date-time
          content:
            application/xml:
              schema:
                type: string
            application/json:
              schema:
                type: string
        '400':
          description: Invalid username/password supplied
  /user/logout:
    get:
      tags:
        - user
      summary: Logs out current logged in user session
      description: ''
      operationId: logoutUser
      responses:
        default:
          description: successful operation
  '/user/{username}':
    get:
      tags:
        - user
      summary: Get user by user name
      description: ''
      operationId: getUserByName
      parameters:
        - name: username
          in: path
          description: 'The name that needs to be fetched. Use user1 for testing. '
          required: true
          schema:
            type: string
      responses:
        '200':
          description: successful operation
          content:
            application/xml:
              schema:
                $ref: '#/components/schemas/User'
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        '400':
          description: Invalid username supplied
        '404':
          description: User not found
    put:
      tags:
        - user
      summary: Updated user
      description: This can only be done by the logged in user.
      operationId: updateUser
      parameters:
        - name: username
          in: path
          description: name that need to be updated
          required: true
          schema:
            type: string
      responses:
        '200':
          description: OK
        '400':
          description: Invalid user supplied
        '404':
          description: User not found
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/User'
        description: Updated user object
        required: true
    delete:
      tags:
        - user
      summary: Delete user
      description: This can only be done by the logged in user.
      operationId: deleteUser
      parameters:
        - name: username
          in: path
          description: The name that needs to be deleted
          required: true
          schema:
            type: string
      responses:
        '200':
          description: OK
        '400':
          description: Invalid username supplied
        '404':
          description: User not found
externalDocs:
  description: Find out more about Swagger
  url: 'http://swagger.io'
components:
  responses:
    PetResponse:
      description: successful operation
      content:
        application/xml:
          schema:
            type: array
            items:
              $ref: '#/components/schemas/Pet'
        application/json:
          schema:
            type: array
            items:
              $ref: '#/components/schemas/Pet'
  requestBodies:
    UserArray:
      content:
        application/json:
          schema:
            type: array
            items:
              $ref: '#/components/schemas/User'
      description: List of user object
      required: true
    Pet:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Pet'
        application/xml:
          schema:
            $ref: '#/components/schemas/Pet'
      description: Pet object that needs to be added to the store
      required: true
  securitySchemes:
    petstore_auth:
      type: oauth2
      flows:
        implicit:
          authorizationUrl: 'http://petstore.swagger.io/oauth/dialog'
          scopes:
            'write:pets': modify pets in your account
            'read:pets': read your pets
    api_key:
      type: apiKey
      name: api_key
      in: header
  schemas:
    Order:
      type: object
      properties:
        id:
          type: integer
          format: int64
        petId:
          type: integer
          format: int64
        quantity:
          type: integer
          format: int32
        shipDate:
          type: string
          format: date-time
        status:
          type: string
          description: Order Status
          enum:
            - placed
            - approved
            - delivered
        complete:
          type: boolean
          default: false
      xml:
        name: Order
    User:
      type: object
      properties:
        id:
          type: integer
          format: int64
        username:
          type: string
        firstName:
          type: string
        lastName:
          type: string
        email:
          type: string
        password:
          type: string
        phone:
          type: string
        userStatus:
          type: integer
          format: int32
          description: User Status
      xml:
        name: User
    Category:
      type: object
      properties:
        id:
          type: integer
          format: int64
        name:
          type: string
      xml:
        name: Category
    Tag:
      type: object
      properties:
        id:
          type: integer
          format: int64
        name:
          type: string
      xml:
        name: Tag
    Pet:
      type: object
      required:
        - name
        - photoUrls
      properties:
        id:
          type: integer
          format: int64
        category:
          $ref: '#/components/schemas/Category'
        name:
          type: string
          example: doggie
        photoUrls:
          type: array
          xml:
            name: photoUrl
            wrapped: true
          items:
            type: string
        tags:
          type: array
          xml:
            name: tag
            wrapped: true
          items:
            $ref: '#/components/schemas/Tag'
        status:
          type: string
          description: pet status in the store
          enum:
            - available
            - pending
            - sold
      xml:
        name: Pet
    ApiResponse:
      type: object
      properties:
        code:
          type: integer
          format: int32
        type:
          type: string
        message:
          type: string
