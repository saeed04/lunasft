openapi: 3.0.3
title: LunaSoft Product API
version: 1.0.10
servers:
  - url: 'https://{endpoint_url}'
info:
  description: >-
    BLS Product API for client integrate our product on fund wallet

    > Billionsoft will send the test integration with `(endpoint_url)`, `(X-BLS-KEY)`, `(X-Vendor-ID)`, `(Sign)`
    to you. Your service agent must provider credential. which should be successfully integrated.

    ---

    ### Release Version:

    V1.0.0 - 2023/01/25
    - Add create member, increase / decrease credit, and balance.

    V1.0.1 - 2023/01/31
    - Add launch game and game status.

    V1.0.2 - 2023/02/15
    - Add win loss, statement, outstanding and outstanding detail report.

    V1.0.3 - 2023/02/27
    - Update response status code.

    V1.0.4 - 2023/03/01
    - Update game code.
    - Update request body in route `/report/outstanding` and `/report/outstanding_detail`.

    V1.0.5 - 2023/03/03
    - Add game list.
    
    V1.0.6 - 2023/03/16
    - Add game_code in request body in route `/report/...`.
    - Update request body in route `/report/outstanding` .
    
    V1.0.7 - 2023/03/16
    - Change game_code to provider_code in route `/report/...`
    - Update request body in route `/launch_game`
    
    V1.0.8 - 2023/03/31
    - Add game_list_fishing
    
    V1.0.9 - 2023/04/08
    - Add member login to lobby

    V1.0.9 - 2023/04/10
    - Add bet log
    - Remove outstanding detail
    - Update body of win loss report and outstanding
    
    ---

    ### Authorization:
    | Key | In | Description 
    |-----|-----|-----
    | X-BLS-Key | Header |  BillionSoft Key please ask our information
    | X-Vendor-ID | Header | Vendor ID generate by BillionSoft ask our information
    | Sign | Body | Sign is the signature key

    </br>

    ### Status Code:
    | Status Code | Description
    |-----|-----
    | 0 | Response Success
    | 14001 | Missing Body
    | 14002 | Invalid Body Type
    | 14003 | Invalid Body Pattern
    | 14004 | Credit Insufficient
    | 14006 | Member not found 
    | 14031 | Access Denied
    | 14012 | Unauthorized
    | 14091 | Data not found
    | 14092 | Data duplication
    | 15001 | Service Error <b>Please contact support.</b>

    </br>

    ### Game Code:
    | Provider Code | Provider Name
    |-----|-----
    | JK | JokerGaming
    | PG | PGSoft
    | PP | PragmaticPlay
    | AMBS | AMB Slot
    | AMBP | AMB Poker
    | RT | Red Tiger
    | CQ9 | CQ9
    | SPG | Spade Gaming
    | JL | Jili
    | DGS | DragoonSoft
    | NSP | Next Spin
    | SPP | Simple Play
    | I8 | i8Games
    | EDP | Endorphina
    | PPL | PlayPearls
    | JP | JustPlay
    | NET | NetEnt
    | SML | Slot Mill
    | SA | SA Gaming
    | SX | SexyBaccarat
    | WM | WM Casino
    | XT | XtreamGaming
    | AB | AllBet
    | DGC | DreamGaming
    | VVG | VivoGaming
    | BG | Big Gaming
    | EBT | EBET
    | PPC | PragmaticPlay Casino
    | UBT | UBETT
    | RG | Royal GClub
    | RSG | Royal Slot Game

  contact:
    name: API Support BillionSoft Team
    email: developer@billionsoft.co

paths:
  /create_member:
    post:
      summary: Create Member
      description: |
        member is unique value. we recommended to add prefixes when register ex blsmb0001
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                username:
                  type: string
                  example: 'member001'
                  minLength: 6
                  maxLength: 18
                password:
                  type: string
                  example: 'a@1234'
                  description: 'Password should be at 6 - 24 characters long and at least one special character.'
                  minLength: 6
                  maxLength: 24
                phone_number_contact:
                  type: string
                  example: '098765431'
                  minLength: 9
                memo:
                  type: string
                  example : 'memo'
                sign:
                  type: string
                  description: |
                    `HMACMD5(username + password + x-vendor-id)`
                  example: '4d9bf50cdb08e6796a772ca36f0d0dff'
              required:
                - username
                - password
                - sign
      responses:
        '200':
          description: successful
        '500':
          description: Error

 
  /change_password:
    post:
      summary:  Change Password
      description: Change member password by agent.
      requestBody:
        content:
          application/json:
            schema:
              properties:
                username:
                  type: string
                  example: member001
                new_password:
                  type: string
                  example: 1234@b
                sign:
                  type: string
                  description: |
                    `HMACMD5(username + new_password + x-vendor-id)`
                  example: '4d9bf50cdb08e6796a772ca36f0d0dff'
              required:
                - username
                - password
                - sign
      responses:
        '200':
          description: successful 
        '500':
          description: Error
  /balance:
    post:
      summary: 'Member Balance'
      description: 'Call Member Balance'
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                username:
                  type: string
                  example: 'member001'
                sign:
                  type: string
                  description: |
                    `HMACMD5(username + x-vendor-id)`
                  example: 'a3b2f435648d8a38eabb7d968332701b'
      responses:
        '200':
          description: successful 
        '500':
          description: Error       
          
  /increase_credit:
    post:
      summary: 'Increase Credit'
      description: increase your member credit.
      requestBody:
        content:
          application/json:
            schema:
              properties:
                username:
                  type: string
                  example: 'member001'
                amount:
                  type: number
                  example: 50.0
                sign:
                  type: string
                  description: |
                    `HMACMD5(username + amount + x-vendor-id)`
                  example: '4d9bf50cdb08e6796a772ca36f0d0dff'
      responses:
        '200':
          description: successful
        '500':
          description: Error

  /decrease_credit:
    post:
      summary: 'Decrease Credit'
      description: decrease your member credit.
      requestBody:
        content:
          application/json:
            schema:
              properties:
                username:
                  type: string
                  example: 'member001'
                amount:
                  type: number
                  example: 50.0
                sign:
                  type: string
                  description: |
                    `HMACMD5(username + amount + x-vendor-id)`
                  example: '4d9bf50cdb08e6796a772ca36f0d0dff'
      responses:
        '200':
          description: successful
        '500':
          description: Error
          
  /game_list:
    get:
      summary: 'Game List (Slot Game Only)'
      description: |
        Get the game URL with provider_code, the game is redirected to the lobby via this link. See **Provider Code** Section.
      requestBody:
        content:
          application/json:
            schema:
              properties:
                provider_code:
                  type: string
                  example: "JK"
                sign:
                  type: string
                  description: |
                    `HMACMD5(provider_code + x-vendor-id)`
                  example: 'a3b2f435648d8a38eabb7d968332701b'
      responses:
        '200':
          description: successful
        '500':
          description: Error
      
  /game_list_fishing:
    get:
      summary: Game List (Fish Game Only)
      description:  Get the fishing game URL, the game is redirected to the lobby via this link. See **Provider Code** Section.
      requestBody:
        content:
          application/json:
            schema:
              properties:
                sign:
                  type: string
                  description: |
                    `HMACMD5(provider_code + x-vendor-id)`
      responses:
        '200':
          $ref: "#/components/responses/PetResponse"
        '500':
          description: Error
          
  /launch_game:
    post:
      summary: Launch Game
      description:  Get the game URL with game_code, the game is redirected to the lobby via this link. See **Provider Code** Section.
      requestBody:
        content:
          application/json:
            schema:
              properties:
                game_code:
                  type: string
                  example: "1"
                provider_code:
                  type: string
                  example: "JK"
                language:
                  type: string
                  description: Support TH, EN, CN
                  example: "TH"
                platform:
                  type: string
                  description: 1 = Desktop, 2 = Mobile
                  example: 1
                username:
                  type: string
                  example: 'member001'
                sign:
                  type: string
                  description: |
                    `HMACMD5(username + provider_code + x-vendor-id)`
      responses:
        '200':
          description: successful 
        '500':
          description: Error

  '/login':
    post:
      summary: Login to Lobby
      description:  Login with your member name and go to lobby for play game.
      requestBody:
        content:
          application/json:
            schema:
              properties:
                username:
                  type: string
                  description: username must use prefix
                  example: "blsmb0001_b1"
                domain:
                  type: string
                  example: 'your-domain.demo'
                  description: do not include proto [http, https] in value.
                redirect_url:
                  type: string
                  description: redirect url for return to your lobby when user click logout
                  example: "https://your-domain.demo"
                sign:
                  type: string
                  description: |
                    `HMACMD5(username + x-vendor-id)`
      responses:
        '200':
          description: successful 
        '500':
          description: Error
   
  /update_game_status:
    post:
      summary: Game Status (Open/Close)
      description: Update the game status by game_code. after update game status your member can't play game.
      responses:
        default:
          description: successful operation
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/User'
        description: Created user object
        required: true
  /user/createWithArray:
    post:
      tags:
        - user
      summary: Creates list of users with given input array
      description: ''
      operationId: createUsersWithArrayInput
      responses:
        default:
          description: successful operation
      requestBody:
        $ref: '#/components/requestBodies/UserArray'
  /user/createWithList:
    post:
      tags:
        - user
      summary: Creates list of users with given input array
      description: ''
      operationId: createUsersWithListInput
      responses:
        default:
          description: successful operation
      requestBody:
        $ref: '#/components/requestBodies/UserArray'
  /user/login:
    get:
      tags:
        - user
      summary: Logs user into the system
      description: ''
      operationId: loginUser
      parameters:
        - name: username
          in: query
          description: The user name for login
          required: true
          schema:
            type: string
        - name: password
          in: query
          description: The password for login in clear text
          required: true
          schema:
            type: string
      responses:
        '200':
          description: successful operation
          headers:
            X-Rate-Limit:
              description: calls per hour allowed by the user
              schema:
                type: integer
                format: int32
            X-Expires-After:
              description: date in UTC when token expires
              schema:
                type: string
                format: date-time
          content:
            application/xml:
              schema:
                type: string
            application/json:
              schema:
                type: string
        '400':
          description: Invalid username/password supplied
  /user/logout:
    get:
      tags:
        - user
      summary: Logs out current logged in user session
      description: ''
      operationId: logoutUser
      responses:
        default:
          description: successful operation
  '/user/{username}':
    get:
      tags:
        - user
      summary: Get user by user name
      description: ''
      operationId: getUserByName
      parameters:
        - name: username
          in: path
          description: 'The name that needs to be fetched. Use user1 for testing. '
          required: true
          schema:
            type: string
      responses:
        '200':
          description: successful operation
          content:
            application/xml:
              schema:
                $ref: '#/components/schemas/User'
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        '400':
          description: Invalid username supplied
        '404':
          description: User not found
    put:
      tags:
        - user
      summary: Updated user
      description: This can only be done by the logged in user.
      operationId: updateUser
      parameters:
        - name: username
          in: path
          description: name that need to be updated
          required: true
          schema:
            type: string
      responses:
        '200':
          description: OK
        '400':
          description: Invalid user supplied
        '404':
          description: User not found
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/User'
        description: Updated user object
        required: true
    delete:
      tags:
        - user
      summary: Delete user
      description: This can only be done by the logged in user.
      operationId: deleteUser
      parameters:
        - name: username
          in: path
          description: The name that needs to be deleted
          required: true
          schema:
            type: string
      responses:
        '200':
          description: OK
        '400':
          description: Invalid username supplied
        '404':
          description: User not found
externalDocs:
  description: Find out more about Swagger
  url: 'http://swagger.io'
components:
  responses:
    PetResponse:
      description: successful operation
      content:
        application/xml:
          schema:
            type: array
            items:
              $ref: '#/components/schemas/Pet'
        application/json:
          schema:
            type: array
            items:
              $ref: '#/components/schemas/Pet'
  requestBodies:
    UserArray:
      content:
        application/json:
          schema:
            type: array
            items:
              $ref: '#/components/schemas/User'
      description: List of user object
      required: true
    Pet:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Pet'
        application/xml:
          schema:
            $ref: '#/components/schemas/Pet'
      description: Pet object that needs to be added to the store
      required: true
  securitySchemes:
    petstore_auth:
      type: oauth2
      flows:
        implicit:
          authorizationUrl: 'http://petstore.swagger.io/oauth/dialog'
          scopes:
            'write:pets': modify pets in your account
            'read:pets': read your pets
    api_key:
      type: apiKey
      name: api_key
      in: header
  schemas:
    Order:
      type: object
      properties:
        id:
          type: integer
          format: int64
        petId:
          type: integer
          format: int64
        quantity:
          type: integer
          format: int32
        shipDate:
          type: string
          format: date-time
        status:
          type: string
          description: Order Status
          enum:
            - placed
            - approved
            - delivered
        complete:
          type: boolean
          default: false
      xml:
        name: Order
    User:
      type: object
      properties:
        id:
          type: integer
          format: int64
        username:
          type: string
        firstName:
          type: string
        lastName:
          type: string
        email:
          type: string
        password:
          type: string
        phone:
          type: string
        userStatus:
          type: integer
          format: int32
          description: User Status
      xml:
        name: User
    Category:
      type: object
      properties:
        id:
          type: integer
          format: int64
        name:
          type: string
      xml:
        name: Category
    Tag:
      type: object
      properties:
        id:
          type: integer
          format: int64
        name:
          type: string
      xml:
        name: Tag
    Pet:
      type: object
      required:
        - name
        - photoUrls
      properties:
        id:
          type: integer
          format: int64
        category:
          $ref: '#/components/schemas/Category'
        name:
          type: string
          example: doggie
        photoUrls:
          type: array
          xml:
            name: photoUrl
            wrapped: true
          items:
            type: string
        tags:
          type: array
          xml:
            name: tag
            wrapped: true
          items:
            $ref: '#/components/schemas/Tag'
        status:
          type: string
          description: pet status in the store
          enum:
            - available
            - pending
            - sold
      xml:
        name: Pet
    ApiResponse:
      type: object
      properties:
        code:
          type: integer
          format: int32
        type:
          type: string
        message:
          type: string
